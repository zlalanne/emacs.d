#+TITLE: Emacs configuration

Most of this is taken from [[https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org][hrs dotfiles]].

* Use sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file (concat user-emacs-directory (convert-standard-filename "sensible-defaults.el")))
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
#+END_SRC

* Require package.el

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

* Package Management

Default package repositories have strict licensing requirements. Add additional repos.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
#+END_SRC

Taken from [[https://blog.aaronbieber.com/2015/05/24/from-vim-to-emacs-in-fourteen-days.html][Aaron Bieber's blog]].

#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

* Utility Functions

Define a big ol' bunch of handy utility functions.

#+BEGIN_SRC emacs-lisp
  (defun zl/de-unicode ()
    "Tidy up a buffer by replacing all special Unicode characters
       (smart quotes, etc.) with their more sane cousins"
    (interactive)
    (let ((unicode-map '(("[\u2018\|\u2019\|\u201A\|\uFFFD]" . "'")
                         ("[\u201c\|\u201d\|\u201e]" . "\"")
                         ("\u2013" . "--")
                         ("\u2014" . "---")
                         ("\u2026" . "...")
                         ("\u00A9" . "(c)")
                         ("\u00AE" . "(r)")
                         ("\u2122" . "TM")
                         ("[\u02DC\|\u00A0]" . " "))))
      (save-excursion
        (cl-loop for (key . value) in unicode-map
              do
              (goto-char (point-min))
              (replace-regexp key value)))))

  (defun zl/add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))
#+END_SRC

* EVIL

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t)
  (evil-mode 1)
#+END_SRC

* UI Preferences
** Disable window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

** Color Scheme

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t)
  (setq solarized-use-variable-pitch nil)
  (setq solarized-height-plus-1 1.0)
  (setq solarized-height-plus-2 1.0)
  (setq solarized-height-plus-3 1.0)
  (setq solarized-height-plus-4 1.0)
  (setq solarized-high-contrast-mode-line t)
  (load-theme 'solarized-dark t)
#+END_SRC

** Font

I'm partial to Inconsolata.

The standard =text-scale-= functions just resize the text in the current buffer;
I'd generally like to resize the text in /every/ buffer, and I usually want to
change the size of the modeline, too (this is especially helpful when
presenting). These functions and bindings let me resize everything all together!

#+BEGIN_SRC emacs-lisp
  (setq zl/default-font "Inconsolata")
  (setq zl/default-font-size 14)
  (setq zl/current-font-size zl/default-font-size)

  (setq zl/font-change-increment 1.1)

  (defun zl/set-font-size ()
    "Set the font to `zl/default-font' at `zl/current-font-size'."
    (set-frame-font
     (concat zl/default-font "-" (number-to-string zl/current-font-size))))

  (defun zl/reset-font-size ()
    "Change font size back to `zl/default-font-size'."
    (interactive)
    (setq zl/current-font-size zl/default-font-size)
    (zl/set-font-size))

  (defun zl/increase-font-size ()
    "Increase current font size by a factor of `zl/font-change-increment'."
    (interactive)
    (setq zl/current-font-size
          (ceiling (* zl/current-font-size zl/font-change-increment)))
    (zl/set-font-size))

  (defun zl/decrease-font-size ()
    "Decrease current font size by a factor of `zl/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq zl/current-font-size
          (max 1
               (floor (/ zl/current-font-size zl/font-change-increment))))
    (zl/set-font-size))

  (define-key global-map (kbd "C-)") 'zl/reset-font-size)
  (define-key global-map (kbd "C-+") 'zl/increase-font-size)
  (define-key global-map (kbd "C-=") 'zl/increase-font-size)
  (define-key global-map (kbd "C-_") 'zl/decrease-font-size)
  (define-key global-map (kbd "C--") 'zl/decrease-font-size)

  (zl/reset-font-size)
#+END_SRC

** Highlight Current Line

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

** Show Line Numbers

Only show line numbers in programming or text modes
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
  (add-hook 'text-mode-hook 'linum-mode)
#+END_SRC

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :ensure t)

  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+END_SRC

** Disable Audible Bell

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Highlight trailing whitespace

Highlight any trailing whitespace. Set the background color to the "Solarized Dark" orange

#+BEGIN_SRC emacs-lisp
  (set-face-background 'trailing-whitespace "#cb4b16")
  (setq-default show-trailing-whitespace t)
#+END_SRC

* Sidebar Tree
** Nice Icons

Get some nice icons for neotree.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC

Also need to install some fonts, but don't want to do that every time we load
Emacs make sure to run this one time to install the fonts.

=all-the-icons-install-fonts=

** Neotree

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t)
  (global-set-key [f8] 'neotree-toggle)
#+END_SRC

Also add a nice theme
#+BEGIN_SRC emacs-lisp
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+END_SRC

Fix some keybindings conflicts with =evil-mode=
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
  (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
#+END_SRC
* Editing
** Quickly visit Emacs settings

I futz around with my dotfiles a lot. This binds C-c e to quickly open my Emacs configuration file.

#+BEGIN_SRC emacs-lisp
  (defun zl/visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))

  (global-set-key (kbd "C-c e") 'zl/visit-emacs-config)
#+END_SRC

** Use =company-mode= everywhere

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t)
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

** Always indent with spaces

Never use tabs. Tabs are the devil's whitespace.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Spell Check

I'm a terrible speller... turn on spell check for markdown, $\LaTeX$ and org-mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook 'turn-on-flyspell)
  (add-hook 'org-mode-hook 'turn-on-flyspell)
  (add-hook 'gfm-mode-hook 'turn-on-flyspell)
  (add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
  (add-hook 'text-mode-hook 'turn-on-flyspell)
#+END_SRC

Add flyspell for checking within comments of programming languages

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

** Markdown

Associate =.md= files with GitHub-flavored Markdown.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
  (zl/add-auto-mode 'gfm-mode "\\.md$")
#+END_SRC

** Wrap paragraphs automatically

=AutoFillMode= automatically wraps paragraphs, kinda like hitting =M-q=. I wrap
a lot of paragraphs, so this automatically wraps 'em when I'm writing text,
Markdown, or Org.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'gfm-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

Sometimes, though, I don't wanna wrap text. This toggles wrapping with =C-c q=:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c q") 'auto-fill-mode)
#+END_SRC

* Programming
** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC

** Bazel

Derive a new mode for Bazel from =python-mode=

#+BEGIN_SRC emacs-lisp
  (define-derived-mode zl/bazel-mode python-mode "Bazel Mode"
    "A mode for Bazel files.")
#+END_SRC

Set =zl/bazel-mode= when editing Bazel files

#+BEGIN_SRC emacs-lisp
  (zl/add-auto-mode 'zl/bazel-mode "\\.bzl$")
  (zl/add-auto-mode 'zl/bazel-mode "\\.BUILD$")
  (zl/add-auto-mode 'zl/bazel-mode "BUILD$")
  (zl/add-auto-mode 'zl/bazel-mode "WORKSPACE$")
#+END_SRC

** Ansible

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
  (use-package ansible
    :ensure t)
#+END_SRC

Assume when editing =yaml= files it's Ansible related

#+BEGIN_SRC emacs-lisp
  (add-hook 'yaml-mode-hook '(lambda () (ansible 1)))
#+END_SRC emacs-lisp

** Code Snippets

Use =yasnippet= for code snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (yas-global-mode 1))
#+END_SRC

I donâ€™t want to automatically indent the snippets it inserts. Sometimes this looks pretty bad (when indenting org-mode, for example, or trying to guess at the correct indentation for Python).

#+BEGIN_SRC emacs-lisp
  (setq yas/indent-line nil)
#+END_SRC

* Org-mode
** Display Preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t)
  (add-hook 'org-mode-hook
    (lambda ()
        (org-bullets-mode t)))
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

** Task Management

I prefer to have some additional custom states for tasks.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
    '((sequence "TODO" "WAITING" "|" "DONE" "DELEGATED")))
#+END_SRC

** Exporting

Create nice Twitter Bootstrap themed HTML

#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+END_SRC

*** Exporting to HTML

DonÂ¡Â¯t include a footer with my contact and publishing information at the bottom of every exported HTML document.

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC
* Project Management
** Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t)
  (helm-mode 1)
#+END_SRC

** Projectile

Use projectile to better manage projects

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init (projectile-global-mode))
#+END_SRC

Setup projectile/Helm integration

#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t)
  (setq projectile-completion-system 'helm)
  (helm-projectile-on)
#+END_SRC

Discover all projects in =~/Projects=

#+BEGIN_SRC emacs-lisp
  (projectile-discover-projects-in-directory "Projects")
#+END_SRC

Tell neotree to change directory automatically

#+BEGIN_SRC emacs-lisp
  (setq projectile-switch-project-action 'neotree-projectile-action)
#+END_SRC

I'd like to /always/ be able to recursively fuzzy-search for files, not just
when I'm in a Projecile-defined project. This uses the current directory as a
project root (if I'm not in a "real" project).

#+BEGIN_SRC emacs-lisp
  (setq projectile-require-project-root nil)
#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

Add vim keybindings

#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :ensure t)
#+END_SRC

I bring up the status menu with =C-x g=:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

The default behavior of =magit= is to ask before pushing. I haven't had any
problems with accidentally pushing, so I'd rather not confirm that every time.

#+BEGIN_SRC emacs-lisp
  (setq magit-push-always-verify nil)
#+END_SRC

Enable spellchecking when writing commit messages:

#+BEGIN_SRC emacs-lisp
  (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
#+END_SRC

I sometimes use =git= from the terminal, and I'll use =emacsclient --tty= to
write commits. I'd like to be in the insert state when my editor pops open for
that.

#+BEGIN_SRC emacs-lisp
  (add-hook 'with-editor-mode-hook 'evil-insert-state)
#+END_SRC
